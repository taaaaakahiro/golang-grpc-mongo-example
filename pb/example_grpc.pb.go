// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: protoc/example.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GweetServiceClient is the client API for GweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GweetServiceClient interface {
	PostGwitter(ctx context.Context, in *PostGwitterRequest, opts ...grpc.CallOption) (*PostGwitterResponse, error)
	ReadGwitter(ctx context.Context, in *ReadGwitterRequest, opts ...grpc.CallOption) (*ReadGwitterResponse, error)
	UpdateGwitter(ctx context.Context, in *UpdateGwitterRequest, opts ...grpc.CallOption) (*UpdateGwitterResponse, error)
	DeleteGwitter(ctx context.Context, in *DeleteGwitterRequest, opts ...grpc.CallOption) (*DeleteGwitterResponse, error)
	ListGwitter(ctx context.Context, in *ListGwitterRequest, opts ...grpc.CallOption) (GweetService_ListGwitterClient, error)
}

type gweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGweetServiceClient(cc grpc.ClientConnInterface) GweetServiceClient {
	return &gweetServiceClient{cc}
}

func (c *gweetServiceClient) PostGwitter(ctx context.Context, in *PostGwitterRequest, opts ...grpc.CallOption) (*PostGwitterResponse, error) {
	out := new(PostGwitterResponse)
	err := c.cc.Invoke(ctx, "/gwitter.GweetService/PostGwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gweetServiceClient) ReadGwitter(ctx context.Context, in *ReadGwitterRequest, opts ...grpc.CallOption) (*ReadGwitterResponse, error) {
	out := new(ReadGwitterResponse)
	err := c.cc.Invoke(ctx, "/gwitter.GweetService/ReadGwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gweetServiceClient) UpdateGwitter(ctx context.Context, in *UpdateGwitterRequest, opts ...grpc.CallOption) (*UpdateGwitterResponse, error) {
	out := new(UpdateGwitterResponse)
	err := c.cc.Invoke(ctx, "/gwitter.GweetService/UpdateGwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gweetServiceClient) DeleteGwitter(ctx context.Context, in *DeleteGwitterRequest, opts ...grpc.CallOption) (*DeleteGwitterResponse, error) {
	out := new(DeleteGwitterResponse)
	err := c.cc.Invoke(ctx, "/gwitter.GweetService/DeleteGwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gweetServiceClient) ListGwitter(ctx context.Context, in *ListGwitterRequest, opts ...grpc.CallOption) (GweetService_ListGwitterClient, error) {
	stream, err := c.cc.NewStream(ctx, &GweetService_ServiceDesc.Streams[0], "/gwitter.GweetService/ListGwitter", opts...)
	if err != nil {
		return nil, err
	}
	x := &gweetServiceListGwitterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GweetService_ListGwitterClient interface {
	Recv() (*ListGwitterResponse, error)
	grpc.ClientStream
}

type gweetServiceListGwitterClient struct {
	grpc.ClientStream
}

func (x *gweetServiceListGwitterClient) Recv() (*ListGwitterResponse, error) {
	m := new(ListGwitterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GweetServiceServer is the server API for GweetService service.
// All implementations should embed UnimplementedGweetServiceServer
// for forward compatibility
type GweetServiceServer interface {
	PostGwitter(context.Context, *PostGwitterRequest) (*PostGwitterResponse, error)
	ReadGwitter(context.Context, *ReadGwitterRequest) (*ReadGwitterResponse, error)
	UpdateGwitter(context.Context, *UpdateGwitterRequest) (*UpdateGwitterResponse, error)
	DeleteGwitter(context.Context, *DeleteGwitterRequest) (*DeleteGwitterResponse, error)
	ListGwitter(*ListGwitterRequest, GweetService_ListGwitterServer) error
}

// UnimplementedGweetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGweetServiceServer struct {
}

func (UnimplementedGweetServiceServer) PostGwitter(context.Context, *PostGwitterRequest) (*PostGwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGwitter not implemented")
}
func (UnimplementedGweetServiceServer) ReadGwitter(context.Context, *ReadGwitterRequest) (*ReadGwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGwitter not implemented")
}
func (UnimplementedGweetServiceServer) UpdateGwitter(context.Context, *UpdateGwitterRequest) (*UpdateGwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGwitter not implemented")
}
func (UnimplementedGweetServiceServer) DeleteGwitter(context.Context, *DeleteGwitterRequest) (*DeleteGwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGwitter not implemented")
}
func (UnimplementedGweetServiceServer) ListGwitter(*ListGwitterRequest, GweetService_ListGwitterServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGwitter not implemented")
}

// UnsafeGweetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GweetServiceServer will
// result in compilation errors.
type UnsafeGweetServiceServer interface {
	mustEmbedUnimplementedGweetServiceServer()
}

func RegisterGweetServiceServer(s grpc.ServiceRegistrar, srv GweetServiceServer) {
	s.RegisterService(&GweetService_ServiceDesc, srv)
}

func _GweetService_PostGwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostGwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GweetServiceServer).PostGwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gwitter.GweetService/PostGwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GweetServiceServer).PostGwitter(ctx, req.(*PostGwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GweetService_ReadGwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadGwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GweetServiceServer).ReadGwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gwitter.GweetService/ReadGwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GweetServiceServer).ReadGwitter(ctx, req.(*ReadGwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GweetService_UpdateGwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GweetServiceServer).UpdateGwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gwitter.GweetService/UpdateGwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GweetServiceServer).UpdateGwitter(ctx, req.(*UpdateGwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GweetService_DeleteGwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GweetServiceServer).DeleteGwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gwitter.GweetService/DeleteGwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GweetServiceServer).DeleteGwitter(ctx, req.(*DeleteGwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GweetService_ListGwitter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListGwitterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GweetServiceServer).ListGwitter(m, &gweetServiceListGwitterServer{stream})
}

type GweetService_ListGwitterServer interface {
	Send(*ListGwitterResponse) error
	grpc.ServerStream
}

type gweetServiceListGwitterServer struct {
	grpc.ServerStream
}

func (x *gweetServiceListGwitterServer) Send(m *ListGwitterResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GweetService_ServiceDesc is the grpc.ServiceDesc for GweetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GweetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gwitter.GweetService",
	HandlerType: (*GweetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostGwitter",
			Handler:    _GweetService_PostGwitter_Handler,
		},
		{
			MethodName: "ReadGwitter",
			Handler:    _GweetService_ReadGwitter_Handler,
		},
		{
			MethodName: "UpdateGwitter",
			Handler:    _GweetService_UpdateGwitter_Handler,
		},
		{
			MethodName: "DeleteGwitter",
			Handler:    _GweetService_DeleteGwitter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListGwitter",
			Handler:       _GweetService_ListGwitter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protoc/example.proto",
}
